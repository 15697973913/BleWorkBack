package com.zj.zhijue.glasses.greendao.msdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zj.zhijue.greendao.greendaobean.FirstBean.UniqueBean;
import com.zj.zhijue.greendao.greendaobean.FirstBean.UniqueBeanConverter;

import com.zj.zhijue.greendao.greendaobean.FirstBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "firstbean_tab".
*/
public class FirstBeanDao extends AbstractDao<FirstBean, Long> {

    public static final String TABLENAME = "firstbean_tab";

    /**
     * Properties of entity FirstBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Localid = new Property(0, Long.class, "localid", true, "localid");
        public final static Property TestProperty = new Property(1, String.class, "testProperty", false, "testProperty");
        public final static Property UniqueBean = new Property(2, String.class, "uniqueBean", false, "uniqueBean");
    }

    private final UniqueBeanConverter uniqueBeanConverter = new UniqueBeanConverter();

    public FirstBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FirstBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"firstbean_tab\" (" + //
                "\"localid\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localid
                "\"testProperty\" TEXT," + // 1: testProperty
                "\"uniqueBean\" TEXT);"); // 2: uniqueBean
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"firstbean_tab\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FirstBean entity) {
        stmt.clearBindings();
 
        Long localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindLong(1, localid);
        }
 
        String testProperty = entity.getTestProperty();
        if (testProperty != null) {
            stmt.bindString(2, testProperty);
        }
 
        UniqueBean uniqueBean = entity.getUniqueBean();
        if (uniqueBean != null) {
            stmt.bindString(3, uniqueBeanConverter.convertToDatabaseValue(uniqueBean));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FirstBean entity) {
        stmt.clearBindings();
 
        Long localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindLong(1, localid);
        }
 
        String testProperty = entity.getTestProperty();
        if (testProperty != null) {
            stmt.bindString(2, testProperty);
        }
 
        UniqueBean uniqueBean = entity.getUniqueBean();
        if (uniqueBean != null) {
            stmt.bindString(3, uniqueBeanConverter.convertToDatabaseValue(uniqueBean));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FirstBean readEntity(Cursor cursor, int offset) {
        FirstBean entity = new FirstBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // testProperty
            cursor.isNull(offset + 2) ? null : uniqueBeanConverter.convertToEntityProperty(cursor.getString(offset + 2)) // uniqueBean
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FirstBean entity, int offset) {
        entity.setLocalid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTestProperty(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUniqueBean(cursor.isNull(offset + 2) ? null : uniqueBeanConverter.convertToEntityProperty(cursor.getString(offset + 2)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FirstBean entity, long rowId) {
        entity.setLocalid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FirstBean entity) {
        if(entity != null) {
            return entity.getLocalid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FirstBean entity) {
        return entity.getLocalid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.zj.zhijue.glasses.greendao.msdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zj.zhijue.greendao.greendaobean.UserInfoDBBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "userinfodb_tab".
*/
public class UserInfoDBBeanDao extends AbstractDao<UserInfoDBBean, Void> {

    public static final String TABLENAME = "userinfodb_tab";

    /**
     * Properties of entity UserInfoDBBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Localid = new Property(0, String.class, "localid", false, "localid");
        public final static Property ServerId = new Property(1, String.class, "serverId", false, "serverId");
        public final static Property AccountRole = new Property(2, String.class, "accountRole", false, "accountrole");
        public final static Property Guardian_id = new Property(3, String.class, "guardian_id", false, "guardian_id");
        public final static Property AuthorType = new Property(4, int.class, "authorType", false, "authorType");
        public final static Property Login_name = new Property(5, String.class, "login_name", false, "login_name");
        public final static Property Nickname = new Property(6, String.class, "nickname", false, "nickname");
        public final static Property Name = new Property(7, String.class, "name", false, "name");
        public final static Property Diopter_state = new Property(8, int.class, "diopter_state", false, "diopter_state");
        public final static Property Left_eye_degree = new Property(9, float.class, "left_eye_degree", false, "left_eye_degree");
        public final static Property Right_eye_degree = new Property(10, float.class, "right_eye_degree", false, "right_eye_degree");
        public final static Property Left_front_com_degree = new Property(11, float.class, "left_front_com_degree", false, "left_front_com_degree");
        public final static Property Right_front_com_degree = new Property(12, float.class, "right_front_com_degree", false, "right_front_com_degree");
        public final static Property Interpupillary = new Property(13, float.class, "interpupillary", false, "interpupillary");
        public final static Property Device_id = new Property(14, String.class, "device_id", false, "device_id");
        public final static Property Correct_left_eye_degree = new Property(15, String.class, "correct_left_eye_degree", false, "correct_left_eye_degree");
        public final static Property Correct_right_eye_degree = new Property(16, String.class, "correct_right_eye_degree", false, "correct_right_eye_degree");
        public final static Property Correct_binoculus_degree = new Property(17, String.class, "correct_binoculus_degree", false, "correct_binoculus_degree");
        public final static Property Naked_left_eye_degree = new Property(18, String.class, "naked_left_eye_degree", false, "naked_left_eye_degree");
        public final static Property Naked_right_eye_degree = new Property(19, String.class, "naked_right_eye_degree", false, "naked_right_eye_degree");
        public final static Property Naked_binoculus_degree = new Property(20, String.class, "naked_binoculus_degree", false, "naked_binoculus_degree");
        public final static Property Age = new Property(21, int.class, "age", false, "age");
        public final static Property Born_date = new Property(22, String.class, "born_date", false, "born_date");
        public final static Property Credentials_card = new Property(23, String.class, "credentials_card", false, "credentials_card");
        public final static Property Credentials_type = new Property(24, int.class, "credentials_type", false, "credentials_type");
        public final static Property Expiration_time = new Property(25, String.class, "expiration_time", false, "expiration_time");
        public final static Property Left_front_coefficient = new Property(26, String.class, "left_front_coefficient", false, "left_front_coefficient");
        public final static Property Phone = new Property(27, String.class, "phone", false, "phone");
        public final static Property AreaCode = new Property(28, String.class, "areaCode", false, "areaCode");
        public final static Property Right_after_coefficient = new Property(29, String.class, "right_after_coefficient", false, "right_after_coefficient");
        public final static Property Right_front_coefficient = new Property(30, String.class, "right_front_coefficient", false, "right_front_coefficient");
        public final static Property Sex = new Property(31, int.class, "sex", false, "sex");
        public final static Property Status = new Property(32, int.class, "status", false, "status");
        public final static Property Province = new Property(33, String.class, "province", false, "province");
        public final static Property City = new Property(34, String.class, "city", false, "city");
        public final static Property Area = new Property(35, String.class, "area", false, "area");
        public final static Property Common_address = new Property(36, String.class, "common_address", false, "common_address");
        public final static Property Binding_time = new Property(37, String.class, "binding_time", false, "binding_time");
        public final static Property Left_eye_train_degree = new Property(38, double.class, "left_eye_train_degree", false, "left_eye_train_degree");
        public final static Property Right_eye_train_degree = new Property(39, double.class, "right_eye_train_degree", false, "right_eye_train_degree");
        public final static Property Left_astigmatism_degree = new Property(40, float.class, "left_astigmatism_degree", false, "left_astigmatism_degree");
        public final static Property Right_astigmatism_degree = new Property(41, float.class, "right_astigmatism_degree", false, "right_astigmatism_degree");
        public final static Property Portrait_image_url = new Property(42, String.class, "portrait_image_url", false, "portrait_image_url");
        public final static Property Right_axial = new Property(43, float.class, "right_axial", false, "right_axial");
        public final static Property Left_axial = new Property(44, float.class, "left_axial", false, "left_axial");
        public final static Property Isnewuser = new Property(45, boolean.class, "isnewuser", false, "isnewuser");
        public final static Property Total_money = new Property(46, float.class, "total_money", false, "total_money");
        public final static Property Used_money = new Property(47, float.class, "used_money", false, "used_money");
        public final static Property Total_time = new Property(48, float.class, "total_time", false, "total_time");
        public final static Property Used_time = new Property(49, float.class, "used_time", false, "used_time");
        public final static Property Total_score = new Property(50, float.class, "total_score", false, "total_score");
        public final static Property Used_score = new Property(51, float.class, "used_score", false, "used_score");
        public final static Property TrainTimeYear = new Property(52, float.class, "trainTimeYear", false, "trainTimeYear");
        public final static Property TrainTimeMonth = new Property(53, float.class, "trainTimeMonth", false, "trainTimeMonth");
        public final static Property TrainTimeDay = new Property(54, float.class, "trainTimeDay", false, "trainTimeDay");
        public final static Property TrainTimeHour = new Property(55, float.class, "trainTimeHour", false, "trainTimeHour");
        public final static Property TrainTimeMinute = new Property(56, float.class, "trainTimeMinute", false, "trainTimeMinute");
        public final static Property TrainTimeSecond = new Property(57, float.class, "trainTimeSecond", false, "trainTimeSecond");
        public final static Property ReservedStr0 = new Property(58, String.class, "reservedStr0", false, "reservedStr0");
        public final static Property ReservedStr1 = new Property(59, String.class, "reservedStr1", false, "reservedStr1");
        public final static Property ReservedStr2 = new Property(60, String.class, "reservedStr2", false, "reservedStr2");
        public final static Property ReservedStr3 = new Property(61, String.class, "reservedStr3", false, "reservedStr3");
        public final static Property ReservedInt0 = new Property(62, int.class, "reservedInt0", false, "reservedInt0");
        public final static Property ReservedInt1 = new Property(63, int.class, "reservedInt1", false, "reservedInt1");
        public final static Property ReservedLong0 = new Property(64, long.class, "reservedLong0", false, "reservedLong0");
        public final static Property ReservedLong1 = new Property(65, long.class, "reservedLong1", false, "reservedLong1");
        public final static Property ReservedDouble0 = new Property(66, double.class, "reservedDouble0", false, "reservedDouble0");
        public final static Property ReservedDouble1 = new Property(67, double.class, "reservedDouble1", false, "reservedDouble1");
    }


    public UserInfoDBBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDBBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"userinfodb_tab\" (" + //
                "\"localid\" TEXT," + // 0: localid
                "\"serverId\" TEXT UNIQUE ," + // 1: serverId
                "\"accountrole\" TEXT," + // 2: accountRole
                "\"guardian_id\" TEXT," + // 3: guardian_id
                "\"authorType\" INTEGER NOT NULL ," + // 4: authorType
                "\"login_name\" TEXT," + // 5: login_name
                "\"nickname\" TEXT," + // 6: nickname
                "\"name\" TEXT," + // 7: name
                "\"diopter_state\" INTEGER NOT NULL ," + // 8: diopter_state
                "\"left_eye_degree\" REAL NOT NULL ," + // 9: left_eye_degree
                "\"right_eye_degree\" REAL NOT NULL ," + // 10: right_eye_degree
                "\"left_front_com_degree\" REAL NOT NULL ," + // 11: left_front_com_degree
                "\"right_front_com_degree\" REAL NOT NULL ," + // 12: right_front_com_degree
                "\"interpupillary\" REAL NOT NULL ," + // 13: interpupillary
                "\"device_id\" TEXT," + // 14: device_id
                "\"correct_left_eye_degree\" TEXT," + // 15: correct_left_eye_degree
                "\"correct_right_eye_degree\" TEXT," + // 16: correct_right_eye_degree
                "\"correct_binoculus_degree\" TEXT," + // 17: correct_binoculus_degree
                "\"naked_left_eye_degree\" TEXT," + // 18: naked_left_eye_degree
                "\"naked_right_eye_degree\" TEXT," + // 19: naked_right_eye_degree
                "\"naked_binoculus_degree\" TEXT," + // 20: naked_binoculus_degree
                "\"age\" INTEGER NOT NULL ," + // 21: age
                "\"born_date\" TEXT," + // 22: born_date
                "\"credentials_card\" TEXT," + // 23: credentials_card
                "\"credentials_type\" INTEGER NOT NULL ," + // 24: credentials_type
                "\"expiration_time\" TEXT," + // 25: expiration_time
                "\"left_front_coefficient\" TEXT," + // 26: left_front_coefficient
                "\"phone\" TEXT," + // 27: phone
                "\"areaCode\" TEXT," + // 28: areaCode
                "\"right_after_coefficient\" TEXT," + // 29: right_after_coefficient
                "\"right_front_coefficient\" TEXT," + // 30: right_front_coefficient
                "\"sex\" INTEGER NOT NULL ," + // 31: sex
                "\"status\" INTEGER NOT NULL ," + // 32: status
                "\"province\" TEXT," + // 33: province
                "\"city\" TEXT," + // 34: city
                "\"area\" TEXT," + // 35: area
                "\"common_address\" TEXT," + // 36: common_address
                "\"binding_time\" TEXT," + // 37: binding_time
                "\"left_eye_train_degree\" REAL NOT NULL ," + // 38: left_eye_train_degree
                "\"right_eye_train_degree\" REAL NOT NULL ," + // 39: right_eye_train_degree
                "\"left_astigmatism_degree\" REAL NOT NULL ," + // 40: left_astigmatism_degree
                "\"right_astigmatism_degree\" REAL NOT NULL ," + // 41: right_astigmatism_degree
                "\"portrait_image_url\" TEXT," + // 42: portrait_image_url
                "\"right_axial\" REAL NOT NULL ," + // 43: right_axial
                "\"left_axial\" REAL NOT NULL ," + // 44: left_axial
                "\"isnewuser\" INTEGER NOT NULL ," + // 45: isnewuser
                "\"total_money\" REAL NOT NULL ," + // 46: total_money
                "\"used_money\" REAL NOT NULL ," + // 47: used_money
                "\"total_time\" REAL NOT NULL ," + // 48: total_time
                "\"used_time\" REAL NOT NULL ," + // 49: used_time
                "\"total_score\" REAL NOT NULL ," + // 50: total_score
                "\"used_score\" REAL NOT NULL ," + // 51: used_score
                "\"trainTimeYear\" REAL NOT NULL ," + // 52: trainTimeYear
                "\"trainTimeMonth\" REAL NOT NULL ," + // 53: trainTimeMonth
                "\"trainTimeDay\" REAL NOT NULL ," + // 54: trainTimeDay
                "\"trainTimeHour\" REAL NOT NULL ," + // 55: trainTimeHour
                "\"trainTimeMinute\" REAL NOT NULL ," + // 56: trainTimeMinute
                "\"trainTimeSecond\" REAL NOT NULL ," + // 57: trainTimeSecond
                "\"reservedStr0\" TEXT," + // 58: reservedStr0
                "\"reservedStr1\" TEXT," + // 59: reservedStr1
                "\"reservedStr2\" TEXT," + // 60: reservedStr2
                "\"reservedStr3\" TEXT," + // 61: reservedStr3
                "\"reservedInt0\" INTEGER NOT NULL ," + // 62: reservedInt0
                "\"reservedInt1\" INTEGER NOT NULL ," + // 63: reservedInt1
                "\"reservedLong0\" INTEGER NOT NULL ," + // 64: reservedLong0
                "\"reservedLong1\" INTEGER NOT NULL ," + // 65: reservedLong1
                "\"reservedDouble0\" REAL NOT NULL ," + // 66: reservedDouble0
                "\"reservedDouble1\" REAL NOT NULL );"); // 67: reservedDouble1
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"userinfodb_tab\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoDBBean entity) {
        stmt.clearBindings();
 
        String localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindString(1, localid);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(2, serverId);
        }
 
        String accountRole = entity.getAccountRole();
        if (accountRole != null) {
            stmt.bindString(3, accountRole);
        }
 
        String guardian_id = entity.getGuardian_id();
        if (guardian_id != null) {
            stmt.bindString(4, guardian_id);
        }
        stmt.bindLong(5, entity.getAuthorType());
 
        String login_name = entity.getLogin_name();
        if (login_name != null) {
            stmt.bindString(6, login_name);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
        stmt.bindLong(9, entity.getDiopter_state());
        stmt.bindDouble(10, entity.getLeft_eye_degree());
        stmt.bindDouble(11, entity.getRight_eye_degree());
        stmt.bindDouble(12, entity.getLeft_front_com_degree());
        stmt.bindDouble(13, entity.getRight_front_com_degree());
        stmt.bindDouble(14, entity.getInterpupillary());
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(15, device_id);
        }
 
        String correct_left_eye_degree = entity.getCorrect_left_eye_degree();
        if (correct_left_eye_degree != null) {
            stmt.bindString(16, correct_left_eye_degree);
        }
 
        String correct_right_eye_degree = entity.getCorrect_right_eye_degree();
        if (correct_right_eye_degree != null) {
            stmt.bindString(17, correct_right_eye_degree);
        }
 
        String correct_binoculus_degree = entity.getCorrect_binoculus_degree();
        if (correct_binoculus_degree != null) {
            stmt.bindString(18, correct_binoculus_degree);
        }
 
        String naked_left_eye_degree = entity.getNaked_left_eye_degree();
        if (naked_left_eye_degree != null) {
            stmt.bindString(19, naked_left_eye_degree);
        }
 
        String naked_right_eye_degree = entity.getNaked_right_eye_degree();
        if (naked_right_eye_degree != null) {
            stmt.bindString(20, naked_right_eye_degree);
        }
 
        String naked_binoculus_degree = entity.getNaked_binoculus_degree();
        if (naked_binoculus_degree != null) {
            stmt.bindString(21, naked_binoculus_degree);
        }
        stmt.bindLong(22, entity.getAge());
 
        String born_date = entity.getBorn_date();
        if (born_date != null) {
            stmt.bindString(23, born_date);
        }
 
        String credentials_card = entity.getCredentials_card();
        if (credentials_card != null) {
            stmt.bindString(24, credentials_card);
        }
        stmt.bindLong(25, entity.getCredentials_type());
 
        String expiration_time = entity.getExpiration_time();
        if (expiration_time != null) {
            stmt.bindString(26, expiration_time);
        }
 
        String left_front_coefficient = entity.getLeft_front_coefficient();
        if (left_front_coefficient != null) {
            stmt.bindString(27, left_front_coefficient);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(28, phone);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(29, areaCode);
        }
 
        String right_after_coefficient = entity.getRight_after_coefficient();
        if (right_after_coefficient != null) {
            stmt.bindString(30, right_after_coefficient);
        }
 
        String right_front_coefficient = entity.getRight_front_coefficient();
        if (right_front_coefficient != null) {
            stmt.bindString(31, right_front_coefficient);
        }
        stmt.bindLong(32, entity.getSex());
        stmt.bindLong(33, entity.getStatus());
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(34, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(35, city);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(36, area);
        }
 
        String common_address = entity.getCommon_address();
        if (common_address != null) {
            stmt.bindString(37, common_address);
        }
 
        String binding_time = entity.getBinding_time();
        if (binding_time != null) {
            stmt.bindString(38, binding_time);
        }
        stmt.bindDouble(39, entity.getLeft_eye_train_degree());
        stmt.bindDouble(40, entity.getRight_eye_train_degree());
        stmt.bindDouble(41, entity.getLeft_astigmatism_degree());
        stmt.bindDouble(42, entity.getRight_astigmatism_degree());
 
        String portrait_image_url = entity.getPortrait_image_url();
        if (portrait_image_url != null) {
            stmt.bindString(43, portrait_image_url);
        }
        stmt.bindDouble(44, entity.getRight_axial());
        stmt.bindDouble(45, entity.getLeft_axial());
        stmt.bindLong(46, entity.getIsnewuser() ? 1L: 0L);
        stmt.bindDouble(47, entity.getTotal_money());
        stmt.bindDouble(48, entity.getUsed_money());
        stmt.bindDouble(49, entity.getTotal_time());
        stmt.bindDouble(50, entity.getUsed_time());
        stmt.bindDouble(51, entity.getTotal_score());
        stmt.bindDouble(52, entity.getUsed_score());
        stmt.bindDouble(53, entity.getTrainTimeYear());
        stmt.bindDouble(54, entity.getTrainTimeMonth());
        stmt.bindDouble(55, entity.getTrainTimeDay());
        stmt.bindDouble(56, entity.getTrainTimeHour());
        stmt.bindDouble(57, entity.getTrainTimeMinute());
        stmt.bindDouble(58, entity.getTrainTimeSecond());
 
        String reservedStr0 = entity.getReservedStr0();
        if (reservedStr0 != null) {
            stmt.bindString(59, reservedStr0);
        }
 
        String reservedStr1 = entity.getReservedStr1();
        if (reservedStr1 != null) {
            stmt.bindString(60, reservedStr1);
        }
 
        String reservedStr2 = entity.getReservedStr2();
        if (reservedStr2 != null) {
            stmt.bindString(61, reservedStr2);
        }
 
        String reservedStr3 = entity.getReservedStr3();
        if (reservedStr3 != null) {
            stmt.bindString(62, reservedStr3);
        }
        stmt.bindLong(63, entity.getReservedInt0());
        stmt.bindLong(64, entity.getReservedInt1());
        stmt.bindLong(65, entity.getReservedLong0());
        stmt.bindLong(66, entity.getReservedLong1());
        stmt.bindDouble(67, entity.getReservedDouble0());
        stmt.bindDouble(68, entity.getReservedDouble1());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoDBBean entity) {
        stmt.clearBindings();
 
        String localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindString(1, localid);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(2, serverId);
        }
 
        String accountRole = entity.getAccountRole();
        if (accountRole != null) {
            stmt.bindString(3, accountRole);
        }
 
        String guardian_id = entity.getGuardian_id();
        if (guardian_id != null) {
            stmt.bindString(4, guardian_id);
        }
        stmt.bindLong(5, entity.getAuthorType());
 
        String login_name = entity.getLogin_name();
        if (login_name != null) {
            stmt.bindString(6, login_name);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
        stmt.bindLong(9, entity.getDiopter_state());
        stmt.bindDouble(10, entity.getLeft_eye_degree());
        stmt.bindDouble(11, entity.getRight_eye_degree());
        stmt.bindDouble(12, entity.getLeft_front_com_degree());
        stmt.bindDouble(13, entity.getRight_front_com_degree());
        stmt.bindDouble(14, entity.getInterpupillary());
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(15, device_id);
        }
 
        String correct_left_eye_degree = entity.getCorrect_left_eye_degree();
        if (correct_left_eye_degree != null) {
            stmt.bindString(16, correct_left_eye_degree);
        }
 
        String correct_right_eye_degree = entity.getCorrect_right_eye_degree();
        if (correct_right_eye_degree != null) {
            stmt.bindString(17, correct_right_eye_degree);
        }
 
        String correct_binoculus_degree = entity.getCorrect_binoculus_degree();
        if (correct_binoculus_degree != null) {
            stmt.bindString(18, correct_binoculus_degree);
        }
 
        String naked_left_eye_degree = entity.getNaked_left_eye_degree();
        if (naked_left_eye_degree != null) {
            stmt.bindString(19, naked_left_eye_degree);
        }
 
        String naked_right_eye_degree = entity.getNaked_right_eye_degree();
        if (naked_right_eye_degree != null) {
            stmt.bindString(20, naked_right_eye_degree);
        }
 
        String naked_binoculus_degree = entity.getNaked_binoculus_degree();
        if (naked_binoculus_degree != null) {
            stmt.bindString(21, naked_binoculus_degree);
        }
        stmt.bindLong(22, entity.getAge());
 
        String born_date = entity.getBorn_date();
        if (born_date != null) {
            stmt.bindString(23, born_date);
        }
 
        String credentials_card = entity.getCredentials_card();
        if (credentials_card != null) {
            stmt.bindString(24, credentials_card);
        }
        stmt.bindLong(25, entity.getCredentials_type());
 
        String expiration_time = entity.getExpiration_time();
        if (expiration_time != null) {
            stmt.bindString(26, expiration_time);
        }
 
        String left_front_coefficient = entity.getLeft_front_coefficient();
        if (left_front_coefficient != null) {
            stmt.bindString(27, left_front_coefficient);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(28, phone);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(29, areaCode);
        }
 
        String right_after_coefficient = entity.getRight_after_coefficient();
        if (right_after_coefficient != null) {
            stmt.bindString(30, right_after_coefficient);
        }
 
        String right_front_coefficient = entity.getRight_front_coefficient();
        if (right_front_coefficient != null) {
            stmt.bindString(31, right_front_coefficient);
        }
        stmt.bindLong(32, entity.getSex());
        stmt.bindLong(33, entity.getStatus());
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(34, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(35, city);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(36, area);
        }
 
        String common_address = entity.getCommon_address();
        if (common_address != null) {
            stmt.bindString(37, common_address);
        }
 
        String binding_time = entity.getBinding_time();
        if (binding_time != null) {
            stmt.bindString(38, binding_time);
        }
        stmt.bindDouble(39, entity.getLeft_eye_train_degree());
        stmt.bindDouble(40, entity.getRight_eye_train_degree());
        stmt.bindDouble(41, entity.getLeft_astigmatism_degree());
        stmt.bindDouble(42, entity.getRight_astigmatism_degree());
 
        String portrait_image_url = entity.getPortrait_image_url();
        if (portrait_image_url != null) {
            stmt.bindString(43, portrait_image_url);
        }
        stmt.bindDouble(44, entity.getRight_axial());
        stmt.bindDouble(45, entity.getLeft_axial());
        stmt.bindLong(46, entity.getIsnewuser() ? 1L: 0L);
        stmt.bindDouble(47, entity.getTotal_money());
        stmt.bindDouble(48, entity.getUsed_money());
        stmt.bindDouble(49, entity.getTotal_time());
        stmt.bindDouble(50, entity.getUsed_time());
        stmt.bindDouble(51, entity.getTotal_score());
        stmt.bindDouble(52, entity.getUsed_score());
        stmt.bindDouble(53, entity.getTrainTimeYear());
        stmt.bindDouble(54, entity.getTrainTimeMonth());
        stmt.bindDouble(55, entity.getTrainTimeDay());
        stmt.bindDouble(56, entity.getTrainTimeHour());
        stmt.bindDouble(57, entity.getTrainTimeMinute());
        stmt.bindDouble(58, entity.getTrainTimeSecond());
 
        String reservedStr0 = entity.getReservedStr0();
        if (reservedStr0 != null) {
            stmt.bindString(59, reservedStr0);
        }
 
        String reservedStr1 = entity.getReservedStr1();
        if (reservedStr1 != null) {
            stmt.bindString(60, reservedStr1);
        }
 
        String reservedStr2 = entity.getReservedStr2();
        if (reservedStr2 != null) {
            stmt.bindString(61, reservedStr2);
        }
 
        String reservedStr3 = entity.getReservedStr3();
        if (reservedStr3 != null) {
            stmt.bindString(62, reservedStr3);
        }
        stmt.bindLong(63, entity.getReservedInt0());
        stmt.bindLong(64, entity.getReservedInt1());
        stmt.bindLong(65, entity.getReservedLong0());
        stmt.bindLong(66, entity.getReservedLong1());
        stmt.bindDouble(67, entity.getReservedDouble0());
        stmt.bindDouble(68, entity.getReservedDouble1());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserInfoDBBean readEntity(Cursor cursor, int offset) {
        UserInfoDBBean entity = new UserInfoDBBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // localid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serverId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // accountRole
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // guardian_id
            cursor.getInt(offset + 4), // authorType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // login_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.getInt(offset + 8), // diopter_state
            cursor.getFloat(offset + 9), // left_eye_degree
            cursor.getFloat(offset + 10), // right_eye_degree
            cursor.getFloat(offset + 11), // left_front_com_degree
            cursor.getFloat(offset + 12), // right_front_com_degree
            cursor.getFloat(offset + 13), // interpupillary
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // device_id
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // correct_left_eye_degree
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // correct_right_eye_degree
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // correct_binoculus_degree
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // naked_left_eye_degree
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // naked_right_eye_degree
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // naked_binoculus_degree
            cursor.getInt(offset + 21), // age
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // born_date
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // credentials_card
            cursor.getInt(offset + 24), // credentials_type
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // expiration_time
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // left_front_coefficient
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // phone
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // areaCode
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // right_after_coefficient
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // right_front_coefficient
            cursor.getInt(offset + 31), // sex
            cursor.getInt(offset + 32), // status
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // province
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // city
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // area
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // common_address
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // binding_time
            cursor.getDouble(offset + 38), // left_eye_train_degree
            cursor.getDouble(offset + 39), // right_eye_train_degree
            cursor.getFloat(offset + 40), // left_astigmatism_degree
            cursor.getFloat(offset + 41), // right_astigmatism_degree
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // portrait_image_url
            cursor.getFloat(offset + 43), // right_axial
            cursor.getFloat(offset + 44), // left_axial
            cursor.getShort(offset + 45) != 0, // isnewuser
            cursor.getFloat(offset + 46), // total_money
            cursor.getFloat(offset + 47), // used_money
            cursor.getFloat(offset + 48), // total_time
            cursor.getFloat(offset + 49), // used_time
            cursor.getFloat(offset + 50), // total_score
            cursor.getFloat(offset + 51), // used_score
            cursor.getFloat(offset + 52), // trainTimeYear
            cursor.getFloat(offset + 53), // trainTimeMonth
            cursor.getFloat(offset + 54), // trainTimeDay
            cursor.getFloat(offset + 55), // trainTimeHour
            cursor.getFloat(offset + 56), // trainTimeMinute
            cursor.getFloat(offset + 57), // trainTimeSecond
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // reservedStr0
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // reservedStr1
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // reservedStr2
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // reservedStr3
            cursor.getInt(offset + 62), // reservedInt0
            cursor.getInt(offset + 63), // reservedInt1
            cursor.getLong(offset + 64), // reservedLong0
            cursor.getLong(offset + 65), // reservedLong1
            cursor.getDouble(offset + 66), // reservedDouble0
            cursor.getDouble(offset + 67) // reservedDouble1
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoDBBean entity, int offset) {
        entity.setLocalid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccountRole(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGuardian_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthorType(cursor.getInt(offset + 4));
        entity.setLogin_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDiopter_state(cursor.getInt(offset + 8));
        entity.setLeft_eye_degree(cursor.getFloat(offset + 9));
        entity.setRight_eye_degree(cursor.getFloat(offset + 10));
        entity.setLeft_front_com_degree(cursor.getFloat(offset + 11));
        entity.setRight_front_com_degree(cursor.getFloat(offset + 12));
        entity.setInterpupillary(cursor.getFloat(offset + 13));
        entity.setDevice_id(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCorrect_left_eye_degree(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCorrect_right_eye_degree(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCorrect_binoculus_degree(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setNaked_left_eye_degree(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNaked_right_eye_degree(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setNaked_binoculus_degree(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAge(cursor.getInt(offset + 21));
        entity.setBorn_date(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCredentials_card(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCredentials_type(cursor.getInt(offset + 24));
        entity.setExpiration_time(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setLeft_front_coefficient(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setPhone(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setAreaCode(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRight_after_coefficient(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setRight_front_coefficient(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setSex(cursor.getInt(offset + 31));
        entity.setStatus(cursor.getInt(offset + 32));
        entity.setProvince(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setCity(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setArea(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setCommon_address(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setBinding_time(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setLeft_eye_train_degree(cursor.getDouble(offset + 38));
        entity.setRight_eye_train_degree(cursor.getDouble(offset + 39));
        entity.setLeft_astigmatism_degree(cursor.getFloat(offset + 40));
        entity.setRight_astigmatism_degree(cursor.getFloat(offset + 41));
        entity.setPortrait_image_url(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setRight_axial(cursor.getFloat(offset + 43));
        entity.setLeft_axial(cursor.getFloat(offset + 44));
        entity.setIsnewuser(cursor.getShort(offset + 45) != 0);
        entity.setTotal_money(cursor.getFloat(offset + 46));
        entity.setUsed_money(cursor.getFloat(offset + 47));
        entity.setTotal_time(cursor.getFloat(offset + 48));
        entity.setUsed_time(cursor.getFloat(offset + 49));
        entity.setTotal_score(cursor.getFloat(offset + 50));
        entity.setUsed_score(cursor.getFloat(offset + 51));
        entity.setTrainTimeYear(cursor.getFloat(offset + 52));
        entity.setTrainTimeMonth(cursor.getFloat(offset + 53));
        entity.setTrainTimeDay(cursor.getFloat(offset + 54));
        entity.setTrainTimeHour(cursor.getFloat(offset + 55));
        entity.setTrainTimeMinute(cursor.getFloat(offset + 56));
        entity.setTrainTimeSecond(cursor.getFloat(offset + 57));
        entity.setReservedStr0(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setReservedStr1(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setReservedStr2(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setReservedStr3(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setReservedInt0(cursor.getInt(offset + 62));
        entity.setReservedInt1(cursor.getInt(offset + 63));
        entity.setReservedLong0(cursor.getLong(offset + 64));
        entity.setReservedLong1(cursor.getLong(offset + 65));
        entity.setReservedDouble0(cursor.getDouble(offset + 66));
        entity.setReservedDouble1(cursor.getDouble(offset + 67));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserInfoDBBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserInfoDBBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserInfoDBBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

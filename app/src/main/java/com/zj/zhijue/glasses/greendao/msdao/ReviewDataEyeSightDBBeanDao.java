package com.zj.zhijue.glasses.greendao.msdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zj.zhijue.greendao.greendaobean.ReviewDataEyeSightDBBean.UniqueBean;
import com.zj.zhijue.greendao.greendaobean.ReviewDataEyeSightDBBean.UniqueBeanConverter;

import com.zj.zhijue.greendao.greendaobean.ReviewDataEyeSightDBBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "reviewdataeyesightdb_tab".
*/
public class ReviewDataEyeSightDBBeanDao extends AbstractDao<ReviewDataEyeSightDBBean, String> {

    public static final String TABLENAME = "reviewdataeyesightdb_tab";

    /**
     * Properties of entity ReviewDataEyeSightDBBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Localid = new Property(0, String.class, "localid", true, "localid");
        public final static Property ServerRecoredId = new Property(1, String.class, "serverRecoredId", false, "serverrecoredId");
        public final static Property UserId = new Property(2, String.class, "userId", false, "userId");
        public final static Property UserName = new Property(3, String.class, "userName", false, "userName");
        public final static Property UserType = new Property(4, String.class, "userType", false, "userType");
        public final static Property LeftEyeSight = new Property(5, double.class, "leftEyeSight", false, "leftEyeSight");
        public final static Property RightEyeSight = new Property(6, double.class, "rightEyeSight", false, "rightEyeSight");
        public final static Property DoubleEyeSight = new Property(7, double.class, "doubleEyeSight", false, "doubleEyeSight");
        public final static Property ReviewEyeSightTimes = new Property(8, int.class, "reviewEyeSightTimes", false, "reviewEyeSightTimes");
        public final static Property ReviewEyeSightDate = new Property(9, String.class, "reviewEyeSightDate", false, "reviewEyeSightDate");
        public final static Property TrainTimeLong = new Property(10, float.class, "trainTimeLong", false, "trainTimeLong");
        public final static Property CreateTime = new Property(11, String.class, "createTime", false, "createTime");
        public final static Property ReservedStr0 = new Property(12, String.class, "reservedStr0", false, "reservedStr0");
        public final static Property ReservedStr1 = new Property(13, String.class, "reservedStr1", false, "reservedStr1");
        public final static Property ReservedStr2 = new Property(14, String.class, "reservedStr2", false, "reservedStr2");
        public final static Property ReservedStr3 = new Property(15, String.class, "reservedStr3", false, "reservedStr3");
        public final static Property ReservedLong0 = new Property(16, long.class, "reservedLong0", false, "reservedLong0");
        public final static Property ReservedLong1 = new Property(17, long.class, "reservedLong1", false, "reservedLong1");
        public final static Property ReservedInt0 = new Property(18, int.class, "reservedInt0", false, "reservedInt0");
        public final static Property ReservedInt1 = new Property(19, int.class, "reservedInt1", false, "reservedInt1");
        public final static Property ReservedInt2 = new Property(20, int.class, "reservedInt2", false, "reservedInt2");
        public final static Property ReservedInt3 = new Property(21, int.class, "reservedInt3", false, "reservedInt3");
        public final static Property ReservedInt4 = new Property(22, int.class, "reservedInt4", false, "reservedInt4");
        public final static Property UniqueBean = new Property(23, String.class, "uniqueBean", false, "uniquebean");
    }

    private final UniqueBeanConverter uniqueBeanConverter = new UniqueBeanConverter();

    public ReviewDataEyeSightDBBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ReviewDataEyeSightDBBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"reviewdataeyesightdb_tab\" (" + //
                "\"localid\" TEXT PRIMARY KEY NOT NULL ," + // 0: localid
                "\"serverrecoredId\" TEXT," + // 1: serverRecoredId
                "\"userId\" TEXT NOT NULL ," + // 2: userId
                "\"userName\" TEXT," + // 3: userName
                "\"userType\" TEXT," + // 4: userType
                "\"leftEyeSight\" REAL NOT NULL ," + // 5: leftEyeSight
                "\"rightEyeSight\" REAL NOT NULL ," + // 6: rightEyeSight
                "\"doubleEyeSight\" REAL NOT NULL ," + // 7: doubleEyeSight
                "\"reviewEyeSightTimes\" INTEGER NOT NULL ," + // 8: reviewEyeSightTimes
                "\"reviewEyeSightDate\" TEXT," + // 9: reviewEyeSightDate
                "\"trainTimeLong\" REAL NOT NULL ," + // 10: trainTimeLong
                "\"createTime\" TEXT," + // 11: createTime
                "\"reservedStr0\" TEXT," + // 12: reservedStr0
                "\"reservedStr1\" TEXT," + // 13: reservedStr1
                "\"reservedStr2\" TEXT," + // 14: reservedStr2
                "\"reservedStr3\" TEXT," + // 15: reservedStr3
                "\"reservedLong0\" INTEGER NOT NULL ," + // 16: reservedLong0
                "\"reservedLong1\" INTEGER NOT NULL ," + // 17: reservedLong1
                "\"reservedInt0\" INTEGER NOT NULL ," + // 18: reservedInt0
                "\"reservedInt1\" INTEGER NOT NULL ," + // 19: reservedInt1
                "\"reservedInt2\" INTEGER NOT NULL ," + // 20: reservedInt2
                "\"reservedInt3\" INTEGER NOT NULL ," + // 21: reservedInt3
                "\"reservedInt4\" INTEGER NOT NULL ," + // 22: reservedInt4
                "\"uniquebean\" TEXT NOT NULL UNIQUE );"); // 23: uniqueBean
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_reviewdataeyesightdb_tab_localid ON \"reviewdataeyesightdb_tab\"" +
                " (\"localid\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"reviewdataeyesightdb_tab\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReviewDataEyeSightDBBean entity) {
        stmt.clearBindings();
 
        String localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindString(1, localid);
        }
 
        String serverRecoredId = entity.getServerRecoredId();
        if (serverRecoredId != null) {
            stmt.bindString(2, serverRecoredId);
        }
        stmt.bindString(3, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(5, userType);
        }
        stmt.bindDouble(6, entity.getLeftEyeSight());
        stmt.bindDouble(7, entity.getRightEyeSight());
        stmt.bindDouble(8, entity.getDoubleEyeSight());
        stmt.bindLong(9, entity.getReviewEyeSightTimes());
 
        String reviewEyeSightDate = entity.getReviewEyeSightDate();
        if (reviewEyeSightDate != null) {
            stmt.bindString(10, reviewEyeSightDate);
        }
        stmt.bindDouble(11, entity.getTrainTimeLong());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(12, createTime);
        }
 
        String reservedStr0 = entity.getReservedStr0();
        if (reservedStr0 != null) {
            stmt.bindString(13, reservedStr0);
        }
 
        String reservedStr1 = entity.getReservedStr1();
        if (reservedStr1 != null) {
            stmt.bindString(14, reservedStr1);
        }
 
        String reservedStr2 = entity.getReservedStr2();
        if (reservedStr2 != null) {
            stmt.bindString(15, reservedStr2);
        }
 
        String reservedStr3 = entity.getReservedStr3();
        if (reservedStr3 != null) {
            stmt.bindString(16, reservedStr3);
        }
        stmt.bindLong(17, entity.getReservedLong0());
        stmt.bindLong(18, entity.getReservedLong1());
        stmt.bindLong(19, entity.getReservedInt0());
        stmt.bindLong(20, entity.getReservedInt1());
        stmt.bindLong(21, entity.getReservedInt2());
        stmt.bindLong(22, entity.getReservedInt3());
        stmt.bindLong(23, entity.getReservedInt4());
        stmt.bindString(24, uniqueBeanConverter.convertToDatabaseValue(entity.getUniqueBean()));
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReviewDataEyeSightDBBean entity) {
        stmt.clearBindings();
 
        String localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindString(1, localid);
        }
 
        String serverRecoredId = entity.getServerRecoredId();
        if (serverRecoredId != null) {
            stmt.bindString(2, serverRecoredId);
        }
        stmt.bindString(3, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(5, userType);
        }
        stmt.bindDouble(6, entity.getLeftEyeSight());
        stmt.bindDouble(7, entity.getRightEyeSight());
        stmt.bindDouble(8, entity.getDoubleEyeSight());
        stmt.bindLong(9, entity.getReviewEyeSightTimes());
 
        String reviewEyeSightDate = entity.getReviewEyeSightDate();
        if (reviewEyeSightDate != null) {
            stmt.bindString(10, reviewEyeSightDate);
        }
        stmt.bindDouble(11, entity.getTrainTimeLong());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(12, createTime);
        }
 
        String reservedStr0 = entity.getReservedStr0();
        if (reservedStr0 != null) {
            stmt.bindString(13, reservedStr0);
        }
 
        String reservedStr1 = entity.getReservedStr1();
        if (reservedStr1 != null) {
            stmt.bindString(14, reservedStr1);
        }
 
        String reservedStr2 = entity.getReservedStr2();
        if (reservedStr2 != null) {
            stmt.bindString(15, reservedStr2);
        }
 
        String reservedStr3 = entity.getReservedStr3();
        if (reservedStr3 != null) {
            stmt.bindString(16, reservedStr3);
        }
        stmt.bindLong(17, entity.getReservedLong0());
        stmt.bindLong(18, entity.getReservedLong1());
        stmt.bindLong(19, entity.getReservedInt0());
        stmt.bindLong(20, entity.getReservedInt1());
        stmt.bindLong(21, entity.getReservedInt2());
        stmt.bindLong(22, entity.getReservedInt3());
        stmt.bindLong(23, entity.getReservedInt4());
        stmt.bindString(24, uniqueBeanConverter.convertToDatabaseValue(entity.getUniqueBean()));
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ReviewDataEyeSightDBBean readEntity(Cursor cursor, int offset) {
        ReviewDataEyeSightDBBean entity = new ReviewDataEyeSightDBBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // localid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serverRecoredId
            cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userType
            cursor.getDouble(offset + 5), // leftEyeSight
            cursor.getDouble(offset + 6), // rightEyeSight
            cursor.getDouble(offset + 7), // doubleEyeSight
            cursor.getInt(offset + 8), // reviewEyeSightTimes
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // reviewEyeSightDate
            cursor.getFloat(offset + 10), // trainTimeLong
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // createTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // reservedStr0
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // reservedStr1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // reservedStr2
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // reservedStr3
            cursor.getLong(offset + 16), // reservedLong0
            cursor.getLong(offset + 17), // reservedLong1
            cursor.getInt(offset + 18), // reservedInt0
            cursor.getInt(offset + 19), // reservedInt1
            cursor.getInt(offset + 20), // reservedInt2
            cursor.getInt(offset + 21), // reservedInt3
            cursor.getInt(offset + 22), // reservedInt4
            uniqueBeanConverter.convertToEntityProperty(cursor.getString(offset + 23)) // uniqueBean
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReviewDataEyeSightDBBean entity, int offset) {
        entity.setLocalid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setServerRecoredId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLeftEyeSight(cursor.getDouble(offset + 5));
        entity.setRightEyeSight(cursor.getDouble(offset + 6));
        entity.setDoubleEyeSight(cursor.getDouble(offset + 7));
        entity.setReviewEyeSightTimes(cursor.getInt(offset + 8));
        entity.setReviewEyeSightDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTrainTimeLong(cursor.getFloat(offset + 10));
        entity.setCreateTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReservedStr0(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setReservedStr1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setReservedStr2(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReservedStr3(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setReservedLong0(cursor.getLong(offset + 16));
        entity.setReservedLong1(cursor.getLong(offset + 17));
        entity.setReservedInt0(cursor.getInt(offset + 18));
        entity.setReservedInt1(cursor.getInt(offset + 19));
        entity.setReservedInt2(cursor.getInt(offset + 20));
        entity.setReservedInt3(cursor.getInt(offset + 21));
        entity.setReservedInt4(cursor.getInt(offset + 22));
        entity.setUniqueBean(uniqueBeanConverter.convertToEntityProperty(cursor.getString(offset + 23)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ReviewDataEyeSightDBBean entity, long rowId) {
        return entity.getLocalid();
    }
    
    @Override
    public String getKey(ReviewDataEyeSightDBBean entity) {
        if(entity != null) {
            return entity.getLocalid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReviewDataEyeSightDBBean entity) {
        return entity.getLocalid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
